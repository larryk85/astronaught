#pragma once

#include <cstdint>

#include <compare>
#include <optional>
#include <string_view>

#include <versa/constants.inc>

/**
 * @brief Namespace containing the version information for the library.
 */
namespace @LV_NAMESPACE@ {

   /**
    * @brief Structure representing the version information.
    * Inherits from lv_version_info_t.
    */
   struct version_info : public lv_version_info_t {
      /**
       * @brief Enum class representing the different parts of the version.
       */
      enum class parts : uint8_t {
         major,   /**< Major version */
         minor,   /**< Minor version */
         patch,   /**< Patch version */
         tweak,   /**< Tweak version */
         suffix,  /**< Version suffix */
         git_hash /**< Git hash */
      }; 
      
      /**
       * @brief Default constructor.
       */
      constexpr version_info() = default;

      /**
       * @brief Copy constructor.
       * @param other The version_info object to copy from.
       */
      constexpr version_info(const version_info&) = default;

      /**
       * @brief Move constructor.
       * @param other The version_info object to move from.
       */
      constexpr version_info(version_info&&) = default;

      /**
       * @brief Constructor to initialize the version_info object.
       * @param major The major version number.
       * @param minor The minor version number.
       * @param patch The patch version number.
       * @param tweak The tweak version number.
       * @param suffix The version suffix.
       * @param git_hash The Git hash.
       */
      constexpr inline version_info(std::uint32_t major=0, std::uint32_t minor=0, std::uint32_t patch=0, std::uint32_t tweak=0, std::string_view suffix="", std::string_view git_hash="")
         : lv_version_info_t(major, minor, patch, tweak, suffix, git_hash) {}
     
      /**
       * @brief Comparison operator to compare two version_info objects.
       * @param other The version_info object to compare with.
       * @return std::strong_ordering The result of the comparison.
       */
      constexpr inline std::strong_ordering operator<=>(const version_info& other) const noexcept {
         return number() <=> other.number();
      }

      /**
       * @brief Calculates the numeric representation of the version.
       * @return uint64_t The numeric representation of the version.
       */
      constexpr inline uint64_t number() const {
         return (major * 1000000) + (minor * 10000) + (patch * 100) + tweak;
      }

      /**
       * @brief Converts a specific part of the version to a string.
       * @tparam part The part of the version to convert.
       * @return std::string The string representation of the specified part of the version.
       */
      template <parts part>
      inline std::string to_string() const {
         if constexpr (part == parts::major) {
            return std::to_string(major);
         } else if constexpr (part == parts::minor) {
            return std::to_string(minor);
         } else if constexpr (part == parts::patch) {
            return std::to_string(patch);
         } else if constexpr (part == parts::tweak) {
            return std::to_string(tweak);
         } else if constexpr (part == parts::suffix) {
            return std::string(suffix.data(), suffix.size());
         } else if constexpr (part == parts::git_hash) {
            return std::string(git_hash.data(), git_hash.size());
         } else {
            return std::string();
         }
      }

      /**
       * @brief Converts the entire version to a string.
       * @return std::string The string representation of the version.
       */
      inline std::string to_string() const {
         const auto suffix = to_string<parts::suffix>().empty() ? "" : "-" + to_string<parts::suffix>();
         const auto git_hash = to_string<parts::git_hash>().empty() ? "" : " (" + to_string<parts::git_hash>() + ")";
         return to_string<parts::major>() + "." + 
                to_string<parts::minor>() + "." + 
                to_string<parts::patch>() + "." + 
                to_string<parts::tweak>() +
                suffix + git_hash; 
      }
   };

   /**
    * @brief The version_info object representing the version of the library.
    */
   constexpr inline static version_info version = version_info(@LV_MAJOR@, 
                                                               @LV_MINOR@, 
                                                               @LV_PATCH@, 
                                                               @LV_TWEAK@, 
                                                               "@LV_SUFFIX@",
                                                               "@LV_GIT_HASH@");

} // namespace @LIBVERSION_NAMESPACE@