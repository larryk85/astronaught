function(versa_get_all_targets targets)
   set(dir_queue ${PROJECT_SOURCE_DIR})
   set(result)

   while(dir_queue)
      list(GET dir_queue 0 current_dir)
      list(REMOVE_AT dir_queue 0)

      get_property(subdirs DIRECTORY ${current_dir} PROPERTY SUBDIRECTORIES)
      list(APPEND dir_queue ${subdirs})

      get_property(sub_targets DIRECTORY ${current_dir} PROPERTY BUILDSYSTEM_TARGETS)
      list(APPEND result ${sub_targets})
   endwhile()
   set(${targets} ${result} PARENT_SCOPE)
endfunction()

function(versa_is_imported target is_imported)
   get_target_property(is_imported ${target} IMPORTED)
endfunction()

function(versa_is_executable target is_executable)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "EXECUTABLE")
      set(${is_executable} TRUE PARENT_SCOPE)
   else()
      set(${is_executable} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_static_lib target is_static_library)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "STATIC_LIBRARY")
      set(${is_static_library} TRUE PARENT_SCOPE)
   else()
      set(${is_static_library} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_module_lib target is_module_library)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "MODULE_LIBRARY")
      set(${is_module_library} TRUE PARENT_SCOPE)
   else()
      set(${is_module_library} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_shared_lib target is_shared_library)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "SHARED_LIBRARY")
      set(${is_shared_library} TRUE PARENT_SCOPE)
   else()
      set(${is_shared_library} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_interface_lib target is_interface_library)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "INTERFACE_LIBRARY")
      set(${is_interface_library} TRUE PARENT_SCOPE)
   else()
      set(${is_interface_library} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_test target is_test)
   get_property(is_test_ 
      TARGET ${target} 
      PROPERTY VERSA_IS_TEST)
   if (${is_test_})
      set(${is_test} TRUE PARENT_SCOPE)
   else()
      set(${is_test} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(versa_is_lib target is_lib)
   get_target_property(type_prop ${target} TYPE)
   if (${type_prop} STREQUAL "INTERFACE_LIBRARY" OR
       ${type_prop} STREQUAL "STATIC_LIBRARY" OR
       ${type_prop} STREQUAL "SHARED_LIBRARY" OR
       ${type_prop} STREQUAL "MODULE_LIBRARY")
      set(${is_lib} TRUE PARENT_SCOPE)
   else()
      set(${is_lib} FALSE PARENT_SCOPE)
   endif()
endfunction()

function(print_target_properties target)
    # Get source directories
    get_target_property(sources ${target} SOURCES)
    foreach(source ${sources})
        get_filename_component(source_dir ${source} PATH)
        list(APPEND source_dirs ${source_dir})
    endforeach()
    list(REMOVE_DUPLICATES source_dirs)
    message(STATUS "  Source Directories: ${source_dirs}")

   get_target_property(include_dirs ${target} INTERFACE_INCLUDE_DIRECTORIES)
    list(REMOVE_DUPLICATES include_dirs)
    message(STATUS "  Include Directories: ${include_dirs}")
    # Check if the target is a test
    #if(${target} MATCHES ".*test.*")
    #    message(STATUS "  Is Test: YES")
    #else()
    #    message(STATUS "  Is Test: NO")
    #endif()
endfunction()

function(versa_include_dirs target)
   get_property(type_prop TARGET ${target} PROPERTY TYPE)
   if (${type_prop} STREQUAL "INTERFACE_LIBRARY")
     set(INCLUDE_DIRS INTERFACE_INCLUDE_DIRECTORIES)
   else()
     set(INCLUDE_DIRS INCLUDE_DIRECTORIES)
   endif()

   get_target_property(include_dirs ${target} ${INCLUDE_DIRS})
   if(include_dirs)
      list(REMOVE_DUPLICATES include_dirs)
      set(build_interface_dirs "")

      foreach(dir ${include_dirs})
         string(REGEX MATCH "\\$<BUILD_INTERFACE:[^>]*>" build_interface ${dir})
         string(REGEX MATCH "\\$<INSTALL_INTERFACE:[^>]*>" install_interface ${dir})
         if(build_interface)
            string(REGEX REPLACE "^\\$<BUILD_INTERFACE:(.*)>$" "\\1" build_interface ${build_interface})
            list(APPEND build_interface_dirs ${build_interface})
         elseif(NOT install_interface)
            list(APPEND build_interface_dirs ${dir})
         endif()
      endforeach()
   else()
      set(build_interface_dirs "")
   endif()
   set(${ARGV1} ${build_interface_dirs} PARENT_SCOPE)
endfunction()

function(versa_project_include_dirs include_dirs)
   set(dir_queue ${PROJECT_SOURCE_DIR})
   set(result)

   while(dir_queue)
      list(GET dir_queue 0 current_dir)
      list(REMOVE_AT dir_queue 0)

      get_property(subdirs DIRECTORY ${current_dir} PROPERTY SUBDIRECTORIES)
      list(APPEND dir_queue ${subdirs})

      get_property(sub_targets DIRECTORY ${current_dir} PROPERTY BUILDSYSTEM_TARGETS)
      list(REMOVE_DUPLICATES sub_targets)
      foreach(target ${sub_targets})
         versa_is_test(${target} is_test)
         versa_is_lib(${target} is_lib)
         if(NOT is_test AND is_lib)
            versa_include_dirs(${target} inc_dirs)
            if(inc_dirs)
               string(REGEX MATCH ".*\/_deps\/.*" is_dep ${inc_dirs})
            endif()
            if (NOT is_dep)
               list(APPEND result ${inc_dirs})
            endif()
         endif()
      endforeach()
   endwhile()
   list(REMOVE_DUPLICATES result)
   set(${include_dirs} ${result} PARENT_SCOPE)
endfunction()
